services:
  api-gateway-service:
    build:
      context: ./api-gateway-service
    ports:
      - "${PUBLIC_GATEWAY_PORT}:${INTERNAL_GATEWAY_PORT}"
    # ‚ùå REMOVED: depends_on: [url-shortener-service, url-redirect-service]
    # The Gateway must start independently to support K8s scaling.
    networks:
      - duss-network
    # üí° ADD ENVIRONMENT VARIABLES here to point to the service names
    environment:
      SHORTENER_HOST: url-shortener-service
      REDIRECT_HOST: url-redirect-service

  url-shortener-service:
    build:
      context: ./url-shortener-service
    expose:
      - "${INTERNAL_SHORTEN_PORT}"
    # ‚ùå REMOVED: depends_on: [key-gen-service, postgres, redis]
    networks:
      - duss-network
    # üí° ADD ENVIRONMENT VARIABLES here for connectivity
    environment:
      KEYGEN_HOST: key-gen-service
      POSTGRES_HOST: postgres
      REDIS_HOST: redis

  url-redirect-service:
    build:
      context: ./url-redirect-service
    expose:
      - "${INTERNAL_REDIRECT_PORT}"
    # ‚ùå REMOVED: depends_on: [postgres, redis]
    networks:
      - duss-network
    # üí° ADD ENVIRONMENT VARIABLES here for connectivity
    environment:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis

  key-gen-service:
    build:
      context: ./key-gen-service
    expose:
      - "${INTERNAL_KEYGEN_PORT}"
    networks:
      - duss-network
    # üí° ADD ENVIRONMENT VARIABLES if it depends on the database (recommended)
    environment:
      POSTGRES_HOST: postgres

  postgres:
    image: postgres:13
    # ... other postgres configuration (volumes, environment for credentials)
    networks:
      - duss-network

  redis:
    image: redis:6-alpine
    # ... other redis configuration (volumes, environment for credentials)
    networks:
      - duss-network

networks:
  duss-network:
    driver: bridge
